# -*- coding: utf-8 -*-
"""sentiment analysis. ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qW56f0g5f7jHaU7Zm3eZIq6l949UeP2x
"""

from google.colab import files
upload = files.upload()

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

dataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter = '\t', quoting = 3)

dataset.head()

dataset.tail()

len(dataset)

dataset.duplicated()

dataset.duplicated().sum()

dataset.info()

dataset.describe()

dataset.isnull().sum()

# Cleaning the texts
import re
import nltk
nltk.download('stopwords')
from nltk.stem.porter import PorterStemmer
from nltk.corpus import stopwords
corpus = []
for i in range(0,1000):
    review = re.sub('[a-zA-Z]', ' ',dataset['Review'][0])
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    review = [ps.stem(word) for word in review if not word in set (stopwords.words ("english"))]
    review = ' '.join(review)
    corpus.append(review)

sns.countplot(dataset['Liked'])

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

corpus = []

dataset['Review'][3]

for i in range(0,1000):
  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
  review = ' '.join(review)
  corpus.append(review)

from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values

y

X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from google.colab import drive
drive.mount('/content/drive')

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm,annot = True)

accuracy_score(y_test, y_pred)